@using EventPipelineHandler.Data
@using EventPipelineHandler.EventManager;
@using EventPipelineHandler.Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text;
@page "/"
@inject ApplicationDbContext DbContext
@inject EventService EventService
@inject NavigationManager Navigation
@inject BackgroundTaskQueue BackgroundTaskQueue
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h1>View event actions</h1>
<button class="btn btn-primary" @onclick="() => GenerateEvents()">Generate events</button>

@foreach (var chain in EventActionChains)
{
    <h2 class="mb-3">@chain.Name</h2>
    <div class="row align-center">
            @foreach (var stepGroup in chain.EventActions.GroupBy(e => e.Step).OrderBy(e => e.Min(e => e.Step)).Select(e => e))
            {
                <div class="col-sm">
                <p>Step @stepGroup.First().Step</p>
                    @foreach (var action in stepGroup)
                    {
                        <div class="card bg-dark mb-3 @GetBorderClassColor(action.EventActionState)" style="width: 18rem;">
                            <div class="card-body">
                                <div class="space-between">
                                    <h5 class="card-title">@action.Name</h5>
                                    <div>
                                        <EventActionIcon State="action.EventActionState" />
                                    </div>
                                </div> 
                                <h6 class="card-subtitle mb-2 text-muted">@action.EventActionType</h6>
                                <p class="card-text">@action.Description</p>
                                <button class="btn btn-primary mt-2" disabled=@IsRerunDisabled(action.EventActionState) @onclick="() => RerunEvent(action)">Rerun event</button>
                                <!-- <a href="#" class="card-link">Another link</a> -->
                            </div>
                        </div>
                    }
                </div>
            }
    </div>
}

<style>
    .table {
        color: white !important;
    }

    .fa-spinner {
      animation: spin 2s linear infinite;
    }

    .fa-times {
      color: #ff0000;
    }

    .fa-check {
      color: #00ff00;
    }

    @@keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    tr td {
        vertical-align: middle;
    }

    .space-between {
        display: flex;
        justify-content: space-between;
    }

    .align-center {
        align-items: center;
    }

</style>

@code 
{
    public List<Customer> Customers { get; set; } = new List<Customer>();
    private HubConnection? HubConnection;

    private List<EventActionChain> EventActionChains = new List<EventActionChain>();


    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
        HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/eventActionHub"))
            .Build();

        HubConnection.On<Guid, EventActionState>("EventActionStateUpdated", (eventId, eventActionState) =>
        {
            var eventAction = EventActionChains.SelectMany(e => e.EventActions).FirstOrDefault(e => e.Id == eventId);

            if (eventAction != null)
            {
                eventAction.EventActionState = eventActionState;
                InvokeAsync(StateHasChanged);
            }
        });

        await HubConnection.StartAsync();
    }

    public async Task GetEvents()
    {
        EventActionChains = await EventService.GetEventActionChainsAsync();

        Customers = await DbContext.Customers.AsNoTracking().ToListAsync();

    }

    public bool IsConnected =>
        HubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }

    public void RerunEvent(EventAction eventAction)
    {
        BackgroundTaskQueue.QueueEventAction(eventAction);
        eventAction.EventActionState = EventActionState.InProgress;
    }

    private bool IsRerunDisabled(EventActionState state) => state != EventActionState.Failed;

    public async Task GenerateEvents()
    {
        await EventService.CreateTestEvents();
        await GetEvents();
    }

    private string GetBorderClassColor(EventActionState eventActionState) =>
        eventActionState switch
        {
            EventActionState.Failed => "border border-danger",
            EventActionState.Pending => "border border-dark",
            EventActionState.InProgress => "border border-primary",
            EventActionState.Done => "border border-success",
            _ => throw new Exception()
        };
}